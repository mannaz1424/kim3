<!DOCTYPE html>
<html>
<head>
<meta charset='utf-8' />
<link rel="stylesheet" href="../a00_com/bootstrap.min.css">
<link rel="stylesheet" href="../a00_com/jquery-ui.css">
<link href='../a00_com/packages/core/main.css' rel='stylesheet' />
<link href='../a00_com/packages/daygrid/main.css' rel='stylesheet' />
<link href='../a00_com/packages/timegrid/main.css' rel='stylesheet' />
<style type="text/css">
    .input-group-text{width:100%;}
    .input-group-prepend{width:30%;}
</style>
<script src="../a00_com/jquery.min.js"></script>
<script src="../a00_com/popper.min.js"></script>
<script src="../a00_com/bootstrap.min.js"></script>
<script type="text/javascript" 
	src="../a00_com/jquery-3.4.1.js"></script>
<script  src="../a00_com/vue.js" type="text/javascript"></script>	
<script src="../a00_com/jquery-ui.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/fetch/2.0.3/fetch.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/es6-promise/4.1.1/es6-promise.auto.min.js"></script>
<script src='../a00_com/packages/core/main.js'></script>
<script src='../a00_com/packages/interaction/main.js'></script>
<script src='../a00_com/packages/daygrid/main.js'></script>
<script src='../a00_com/packages/timegrid/main.js'></script>
<script src="https://unpkg.com/axios/dist/axios.min.js" type="text/javascript"></script>
<script>
// http://localhost:7080/springweb/calendar.do?method=data6
  document.addEventListener('DOMContentLoaded', function() {
	// Vue 활용을 위한 instance 선언..
	// 모델 데이터의 cal객체로 데이터를 설정 처리하고 있다.
	// vm.cal.속성 으로  각 객체에서 접근하여 처리할 수 있다.
	var vm = new Vue({
		el:".container",
		// 모델의 핵심 데이터인 calendar 기본 속성을 cal로 선언..
		//  아이디, 제목, 시작일, 마지막일, 내용,
		//  배경색상, 글자색상, 종일일정여부
		data:{msg:"뷰입니다!",
			  cal:{id:0, title:"",start:"",end:"",
				  content:"",
				 color:"#0099cc",textColor:"#ccffff",
				 allDay:"true"}}
	});
	$("#dialog2").dialog({
		autoOpen:false,
		width:"30%",
		buttons:{
			// 하단의 기능 버튼을 클릭시, 처리할 내용..
			"등록":function(){
				// 등록 버튼을 클릭시, 처리되는 내용..
				console.log("##vm.cal:##(등록처리)");
				console.log(vm.cal);
				// 현재 new Vue()에 있는 cal의 모델 데이터를.
				// 지역변수로 할당..
				var cal = vm.cal;
				// 일정 제목은 등록 되었을 때, 처리가능하도록 한다.
				//alert("등록할 일정:"+cal.title);
				if(cal.title!=""){
					console.log("등록할 일정 title:"+cal.title);
					// calendar api에 등록 처리.
					//alert(typeof(cal.allDay)+":"+cal.allDay);
					// 전체 일정 처리 ...(api, DB)
					//vm.cal.allDay = cal.allDay=="true";
					//alert(vm.cal.allDay)
					//calendar.addEvent(vm.cal);
					// 서버 호출을 통해서  DB에 등록 처리..
					// 모델에 있는 속성값이 mapping 된 데이터를 서버에 전송 처리.
					var url = "/springweb/calendar.do?method=insert";
					// axios api 호출..
					// params :  요청값을 key=value형식을 전달할 속성.
					axios({
						method:"post",
						url:url,
						params:cal
					}).then((response)=>{
						//alert(response.data.cal.title);
						// 모델 데이터 초기..		
						vm.cal.title="";
						vm.cal.content="";
						calendar.refetchEvents();
						
						
						$("#dialog2").dialog("close");

					}).catch((ex)=>{
						console.log("에러발생",ex);
					})
				}
				
			},
			"수정":function(){
				console.log("vm.cal:"+vm.cal);
				var cal = vm.cal;
				if(cal.title!=""){
					console.log("등록할 일정 title:"+cal.title);
					cal.allDay = cal.allDay=="true";
					// 1) 화면 처리..
					// id값을 기준으로 등록 데이터 가져와서 처리..
					var event = calendar.getEventById( cal.id );
					// 속성을 저장..
					event.setProp("title",cal.title);
					event.setProp("backgroundColor",cal.color);
					event.setProp("textColor",cal.textColor);
					event.setExtendedProp("content",cal.content);
					event.setAllDay(cal.allDay);
					
					
					// 2) 서버 호출을 통해서  DB에 수정처리..
					var url = "/springweb/calendar.do?method=update";
					// axios api 호출..
					// params :  요청값을 key=value형식을 전달할 속성.
					axios({
						method:"post",
						url:url,
						params:cal
					}).then((response)=>{
						alert(response.data.cal.title);
						
					}).catch((ex)=>{
						console.log("에러발생",ex);
					})
				}				
			},
			"삭제":function(){
				var cal = vm.cal;
				// 화면에서 삭제..
				var event = calendar.getEventById(cal.id);
				event.remove();
				// 데이터로 삭제..
					var url = "/springweb/calendar.do?method=delete";
					// axios api 호출..
					// params :  요청값을 key=value형식을 전달할 속성.
					axios({
						method:"post",
						url:url,
						params:{id:cal.id}
					}).then((response)=>{
						alert(response.data.cal.title);
						// 모델 데이터 초기..		
						vm.cal.title="";
						vm.cal.content="";
						
						$("#dialog2").dialog("close");

					}).catch((ex)=>{
						console.log("에러발생",ex);
					})
			}
		},
		modal:true
	});
	  
	  
    var calendarEl = document.getElementById('calendar');

    var calendar = new FullCalendar.Calendar(calendarEl, {
      plugins: [ 'interaction', 'dayGrid', 'timeGrid' ],
      header: {
        left: 'prev,next today',
        center: 'title',
        right: 'dayGridMonth,timeGridWeek,timeGridDay'
      },
      defaultDate: new Date().toISOString(), //'2019-10-12',//  초기화면 날짜..
      navLinks: true, // can click day/week names to navigate views
      selectable: true,
      selectMirror: true,
      eventClick:function(info){
    	//alert("이벤트 클릭!!");  
    	detail(info);
      },
      droppable:true,
      eventDrop:function(info){
    	// alert("이벤트 이동(드랍)!!");
    	 detail(info);
      },
      eventResize:function(info){
    	 // alert("이벤트 일정 조정"); 
    	  detail(info);
      },
      select: function(arg) {
    	  // 선택 이벤트..(빈공백에 클릭, 일정을 스크롤링 했을 때..)
    	$("#dialog2").dialog("open");
    	// 시작 일정 : arg.start(date 타입) ==>  iso형식으로 변환처리.
    	//          arg.start.toISOString()
    	// 마지막 일정 :  arg.end.toISOString()
    	// 클릭하거나  strolling을 통해서 가져온 매개변수 arg는 Model데이터에 할당하면
    	// v-model로 매핑된 입력 요소객체(input/select)로 출력할 수 있다.
    	// 위 선언된 var vm = new Vue()에 의해서 vm인스턴스로 model객체를 접근할 수
    	// 있다.
    	// arg에서 데이터를 가져오기 때문에, 현재 시간 정보,
    	//  전체선택 여부를 가져올 수 있다..
    	vm.cal.start = arg.start.toISOString();
    	vm.cal.end = arg.end.toISOString();
    	vm.cal.allDay = arg.allDay;

        calendar.unselect()
      },
      editable: true,
      eventLimit: true, // allow "more" link when too many events
      events: function(info, successCallback, failureCallback){
    	  // 로딩이 되었을 때, 서버와 연동하여 데이터를 처리하여 event내용을 입력하여 준다.
    	  /*
    	  # axios 비동 api 사용..
    	  1. axios lib 선언..
    	  2. 기본 형식axios (promise형식)
    	  	axios({속성:속성값, ...}).then((response)=>{}).catch((ex)=>{})
    	  3. axios의 속성.
    	  	1) method: GET/POST 방식 선언..
    	  	2) url : "서버 주소"
    	  	3) params : {요청1:요청1값, 요청2:요청2값,...}
    	  4. response의 내부 속성.
    	  	1) data : 수신 데이터(json)
    	  		json 데이터 {"속성":[리스트 배열 객체]}
    	  		response.data.속성 ex) response.data.list
    	  */
    	  // http://localhost:7080/springweb/calendar.do?method=data6
    		var url = "/springweb/calendar.do?method=data6";
    		axios({
    			method:"post",
    			url:url
    		}).then((response)=>{
    			console.log("결과 데이터:"+response.data.list.length);
    			console.log(response);
    			var calList = response.data.list;
    			// calendar api에서 지원되는  callback-결과를 처리하는 함수에
    			// 서버에서 온  list 데이터를 할당한다.
    			successCallback(calList);
    			
    			
    		}).catch((ex)=>{
    			console.log(ex);
    		})
    	  
    	  
      }
    });

    calendar.render();
    
    function detail(info){
  	  console.log("변경할 event:"+info);
  	  var event = info.event;
  	  /*
  	  for(var pro in event){
  		  console.log(pro+":"+event[pro]);
  	  }
  	  */
  	  // 모델 데이터에 현 가지고 있는 값 중 속성을 할당.
  	  // 상세내용 정보를 모델데이터로 mapping 처리한다.
  	  var cal = vm.cal;
  	  cal.id = event.id;
  	  cal.title = event.title;
  	  cal.start = event.start.toISOString();
  	  // 같은 날짜시간은 null이 들어오기 때문에 시작날짜로 처리..
  	  cal.end = event.end!=null?event.end.toISOString():event.start.toISOString();
  	  var exEvent = info.event.extendedProps;
  	  cal.content = exEvent.content;
  	  cal.color= event.backgroundColor;
  	  cal.textColor = event.textColor;
  	  cal.allDay = ""+event.allDay;
  	  $("#dialog2").dialog("open");
    }    
  });

</script>
<style>

  body {
    margin: 40px 10px;
    padding: 0;
    font-family: Arial, Helvetica Neue, Helvetica, sans-serif;
    font-size: 14px;
  }

  #calendar {
    max-width: 900px;
    margin: 0 auto;
  }

</style>
</head>
<body><!-- .container frm1 -->
  <div class="container">
  	<div id='calendar'></div>
  	<!-- 
  	1. 등록창이나 세부사항을 볼 수 있는 화면구현.
  		 div 아이디값으로 설정..dialog2
  	2. 세부 항목은 모델데이터로 mapping  처리..
  	    ex) <input name="title"  v-model="cal.title" 
  	    등록  이름은 title이고, 이와 연결되는 모델명은 cal.title	 
  	3. 선택 이벤트에 의해서 dialog2라는 이름의 div가 dialog()-jqUI지원
  		호출 된다. $("#dialog2").dialog()   
  	 -->
  	<div id="dialog2" title="일정">
		<form id="frm1" >
			<div class="input-group mb-3">
		    	<div class="input-group-prepend"><span class="input-group-text">일정</span></div>
				<input name="title" v-model="cal.title" type="text" class="form-control" placeholder="일정을 입력"/></div>
			<div class="input-group mb-3">
		    	<div class="input-group-prepend"><span class="input-group-text">시작일</span></div>
				<input name="start"  v-model="cal.start"  type="text" class="form-control"  readonly/></div>
			<div class="input-group mb-3">
		    	<div class="input-group-prepend"><span class="input-group-text">마지막일</span></div>
				<input name="end"  v-model="cal.end"  type="text" class="form-control"  readonly/></div>
			<div class="input-group mb-3">
		    	<div class="input-group-prepend"><span class="input-group-text">내용</span></div>
				<textarea name="content"  v-model="cal.content"  class="form-control" rows="5" placeholder="내용 입력"></textarea></div>
			<div class="input-group mb-3">
		    	<div class="input-group-prepend"><span class="input-group-text">종일여부</span></div>
				<select name="allDay"  v-model="cal.allDay"  class="form-control">
					<option value="true">종 일</option>
					<option value="false">시 간</option>
				</select></div>
			<div class="input-group mb-3">
		    	<div class="input-group-prepend"><span class="input-group-text">배경색상</span></div>
				<input name="color"  v-model="cal.color"  type="color" class="form-control" /></div>
			<div class="input-group mb-3">
		    	<div class="input-group-prepend"><span class="input-group-text">글자색상</span></div>
				<input name="textColor"  v-model="cal.textColor"  type="color" class="form-control" /></div>
		</form>
	</div>	  
  </div>
</body>
</html>
